<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AddressTWRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AddressTWRepository extends EntityRepository
{
    
    function findNearAandB($userA, $userB){
        
        $retour = array();        
        $retour = $this->getNearestFromUser($retour, $userA);
        $retour = $this->getNearestFromUser($retour, $userB);
        
        if(count($retour)>0){
            
            $tri = array();
            
            foreach($retour as $key => $value){
                $tri[$key] = $value['distance'];
            }
            array_multisort($tri, SORT_ASC, $retour);
            
        }
        
        return $retour;
    }
    
    function findNearAwithB($userA, $userB){
        
        $retour = array();        
        $retour = $this->getNearestFromUser($retour, $userA);

        if(count($retour)>0){
            foreach($retour as $key => $value){
                // calcule distance A
                if ($userA->getAddress()->getLatitude() != null && $userA->getAddress()->getLongitude() != null) {                
                    $srclat = $userA->getAddress()->getLatitude();
                    $srclon = $userA->getAddress()->getLongitude();
                    $latitude = $retour[$key]['latitude'];
                    $longitude = $retour[$key]['longitude'];
                    $retour[$key]['distance'] = $this->distanceGeoPoints($latitude,$longitude, $srclat,$srclon)/1000; // en km
                }
                // calcule distance B
                if ($userB->getAddress()->getLatitude() != null && $userB->getAddress()->getLongitude() != null) {                
                    $srclat = $userB->getAddress()->getLatitude();
                    $srclon = $userB->getAddress()->getLongitude();
                    $latitude = $retour[$key]['latitude'];
                    $longitude = $retour[$key]['longitude'];
                    $retour[$key]['distanceB'] = $this->distanceGeoPoints($latitude,$longitude, $srclat,$srclon)/1000; // en km
                }
            }
        }
        
        // ordonne par distance A
        if(count($retour)>0){            
            $tri = array();            
            foreach($retour as $key => $value){
                $tri[$key] = $value['distance'];
            }
            array_multisort($tri, SORT_ASC, $retour);            
        }
        
        return $retour;
    }
    
    function findInRegionsAandB($userA, $userB){
        $retour = array();        
        $retour = $this->getInRegionFromUser($retour, $userA);
        $retour = $this->getInRegionFromUser($retour, $userB);
        
        if(count($retour)>0){
            foreach($retour as $key => $value){
                // calcule distance A
                if ($userA->getAddress()->getLatitude() != null && $userA->getAddress()->getLongitude() != null) {                
                    $srclat = $userA->getAddress()->getLatitude();
                    $srclon = $userA->getAddress()->getLongitude();
                    $latitude = $retour[$key]['latitude'];
                    $longitude = $retour[$key]['longitude'];
                    $retour[$key]['distance'] = $this->distanceGeoPoints($latitude,$longitude, $srclat,$srclon)/1000; // en km
                }
                // calcule distance B
                if ($userB->getAddress()->getLatitude() != null && $userB->getAddress()->getLongitude() != null) {                
                    $srclat = $userB->getAddress()->getLatitude();
                    $srclon = $userB->getAddress()->getLongitude();
                    $latitude = $retour[$key]['latitude'];
                    $longitude = $retour[$key]['longitude'];
                    $retour[$key]['distanceB'] = $this->distanceGeoPoints($latitude,$longitude, $srclat,$srclon)/1000; // en km
                }
            }
        }
        
        
        return $retour;
    }
    
    
    private function getNearestFromUser($retour, $user){
        
        $notIn='0';
        foreach($retour as $item => $value){
            $notIn.=','.$value['id'];
        }
        
        $cUnit = 6371;
        $dist = 50; // 50 km de rayon
        if ($user->getAddress()->getLatitude() != null && $user->getAddress()->getLongitude() != null) {
            $srclat = $user->getAddress()->getLatitude();
            $srclon = $user->getAddress()->getLongitude();
        }else{
            $srclat = null;            
            $srclon = null;
        }
                
        
        if($user->getAddress() != null){
            $query = $this->createQueryBuilder('a')
                ->where('a.name IS NOT NULL');
            $query->andWhere($query->expr()->notIn('a.id', $notIn));
            
            $orQuery = $query->expr()->orx();
            
            if($user->getAddress()->getZipCode() != null){
                $orQuery->add($query->expr()->eq("a.zipCode", ":zipCode"));
                $query->setParameter('zipCode', $user->getAddress()->getZipCode());
            }
            if($user->getAddress()->getCity() != null){
                $orQuery->add($query->expr()->like("a.city", ":city"));
                $query->setParameter('city', '%'.$user->getAddress()->getCity().'%');
            }  
            if($user->getAddress()->getRegion() != null){
                $orQuery->add($query->expr()->eq("a.region", ":region"));
                $query->setParameter('region', $user->getAddress()->getRegion());
            }                       
            $query->andWhere($orQuery);
            
            if ($user->getAddress()->getLatitude() != null && $user->getAddress()->getLongitude() != null) {
                
                $sql = "( ( $cUnit * ACOS( COS( RADIANS(:latitude) ) * COS( RADIANS( a.latitude ) )"
                        . " * COS( RADIANS( a.longitude ) - RADIANS(:longitude) ) + SIN( RADIANS(:latitude) ) "
                        . "* SIN( RADIANS( a.latitude ) ) ) ) <= :distance "
                        . "OR a.longitude IS NULL OR a.latitude IS NULL )";

                $query->andWhere($sql)
                        ->setParameter('latitude', $srclat)
                        ->setParameter('longitude', $srclon)
                        ->setParameter('distance', $dist);
            }
            
            $query->setMaxResults('10');
        }
        $selections = $query->getQuery()->getResult();
        
        if(count($selections) > 0){
            foreach($selections as $selection){
                
                $distance = 999;
                $distanceB = 999;
                $latitude = $selection->getLatitude();
                $longitude = $selection->getLongitude();
                /*
                if ($user->getAddress()->getLatitude() != null && $user->getAddress()->getLongitude() != null) {                
                    $latitude = $selection->getLatitude();
                    $longitude = $selection->getLongitude();
                    //$distance = ( $cUnit * 10 * acos( (cos( deg2rad($srclat) ) * cos( deg2rad( $latitude ) ) * cos( deg2rad( $longitude ) - deg2rad($srclon) ) + (sin( deg2rad($latitude) ) * sin( deg2rad( $latitude ) ) ) ) * 0.1) );                                    
                    
                    $distance = $this->distanceGeoPoints($latitude,$longitude, $srclat,$srclon)/1000; // en km
                    
                } */      
                $retour[] = array('id'=>$selection->getId(), 'name'=>$selection->getName(), 'city'=>$selection->getCity(), 'distance'=>$distance, 'distanceB'=>$distanceB, 'latitude'=>$latitude, 'longitude'=>$longitude);                
            }
        }
        return $retour;
    }
    
    private function getInRegionFromUser($retour, $user){
        
        $notIn='0';
        foreach($retour as $item => $value){
            $notIn.=','.$value['id'];
        }
        
        if($user->getAddress() != null){            
            if($user->getAddress()->getRegion() != null){                
                $query = $this->createQueryBuilder('a')
                    ->where('a.name IS NOT NULL');
                $query->andWhere($query->expr()->notIn('a.id', $notIn));
                
                $query->andWhere($query->expr()->eq("a.region", ":region"));
                $query->setParameter('region', $user->getAddress()->getRegion());
                
                $query->orderBy('a.city', 'ASC');
                
                $selections = $query->getQuery()->getResult();
        
                if(count($selections) > 0){
                    foreach($selections as $selection){
                        $distance = 999;
                        $distanceB = 999;
                        $latitude = $selection->getLatitude();
                        $longitude = $selection->getLongitude();
                        $retour[] = array('id'=>$selection->getId(), 'name'=>$selection->getName(), 'city'=>$selection->getCity(), 'region'=>$selection->getRegion(), 'distance'=>$distance, 'distanceB'=>$distanceB, 'latitude'=>$latitude, 'longitude'=>$longitude);                
                    }
                }
            }                       
        }        
        return $retour;
    }
    
    private function distanceGeoPoints ($lat1, $lng1, $lat2, $lng2) {

        $earthRadius = 3958.75;

        $dLat = deg2rad($lat2-$lat1);
        $dLng = deg2rad($lng2-$lng1);


        $a = sin($dLat/2) * sin($dLat/2) +
           cos(deg2rad($lat1)) * cos(deg2rad($lat2)) *
           sin($dLng/2) * sin($dLng/2);
        $c = 2 * atan2(sqrt($a), sqrt(1-$a));
        $dist = $earthRadius * $c;

        // from miles
        $meterConversion = 1609;
        $geopointDistance = $dist * $meterConversion;

        return $geopointDistance;
    }
    
}
