<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BouteilleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BouteilleRepository extends EntityRepository
{
    function findForIdAndUser($id, $member){
        $query = $this->createQueryBuilder('b')
                ->where('b.member = :member')
                ->andWhere('b.id = :id')
                ->setParameter('member', $member)
                ->setParameter('id', $id);

        return $query->getQuery()->getResult();
    }
    
    function findOthersFrom($id, $member){
        $query = $this->createQueryBuilder('b')
                ->where('b.member = :member')
                ->andWhere('b.id <> :id')
                ->andWhere("b.online = 1")
                ->andWhere("b.reserved = 0")
                ->setParameter('member', $member)
                ->setParameter('id', $id);

        return $query->getQuery()->getResult();
    }
    
    
    function findForUserOnline($member){
        $query = $this->createQueryBuilder('b')
                ->where('b.member = :member')
                ->andWhere("b.online = 1")
                ->andWhere("b.reserved = 0")
                ->setParameter('member', $member);

        return $query->getQuery()->getResult();
    }
    
    
    
    
    function findFromSelector($filtres){
        return $this->applicationFilters($filtres, 0);
    }
    
    function findFromSelectorWithoutUser($filtres, $idUser){
        return $this->applicationFilters($filtres, $idUser);
    }
    
    function applicationFilters($filtres, $idUser){
        
        $query = $this->createQueryBuilder('b')
                ->leftJoin('b.typeDeVin', 'tdv')
                ->leftJoin('b.typeDomaine', 'td')
                ->leftJoin('b.typeAppellation', 'ta')
                ->leftJoin('b.typeCuvee', 'tc')
                ->leftJoin('b.typeRegion', 'tr')
                ->leftJoin('b.typePays', 'tp')
                ->where("1 = 1")
                ->andWhere("b.online = 1")
                ->andWhere("b.reserved = 0")
                ->andWhere("b.member <>  :member")
                ->setParameter('member', $idUser);
        
        if(isset($filtres['keyword'])&&($filtres['keyword']!='')){
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("b.commentaire", ":keyword"));
            $orQuery->add($query->expr()->like("tdv.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("tdv.nameUk", ":keyword"));
            $orQuery->add($query->expr()->like("td.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("td.nameUk", ":keyword"));
            $orQuery->add($query->expr()->like("ta.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("ta.nameUk", ":keyword"));
            $orQuery->add($query->expr()->like("tc.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("tc.nameUk", ":keyword"));
            $orQuery->add($query->expr()->like("tr.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("tr.nameUk", ":keyword"));
            $orQuery->add($query->expr()->like("tp.nameFr", ":keyword"));
            $orQuery->add($query->expr()->like("tp.nameUk", ":keyword"));
            
            $query->andWhere($orQuery)
                ->setParameter('keyword', '%'.$filtres['keyword'].'%');
        }
        if(isset($filtres['typeDeVin'])&&($filtres['typeDeVin']!='')){
            $query->andWhere('tdv.id = :typeDeVin')
                ->setParameter('typeDeVin', $filtres['typeDeVin']);
        }
        if(isset($filtres['typeRegion'])&&($filtres['typeRegion']!='')){
            if($filtres['typeRegion']!=-1){
                $query->andWhere('tr.id = :typeRegion')
                    ->setParameter('typeRegion', $filtres['typeRegion']);
            }else{
                $query->andWhere($query->expr()->notIn('tr.id', $filtres['typeRegionAExclure']));
            }
        }
        if(isset($filtres['millesime'])&&($filtres['millesime']!='')){
            $query->andWhere('b.millesime = :millesime')
                ->setParameter('millesime', $filtres['millesime']);
        }
        if(isset($filtres['typePays'])&&($filtres['typePays']!='')){
            $query->andWhere('tp.id = :typePays')
                ->setParameter('typePays', $filtres['typePays']);
        }
        
        
        
        if(isset($filtres['filtrageBottle'])&&($filtres['filtrageBottle']!='')){
            if($filtres['filtrageBottle']=='millesime'){
                $query->orderBy('b.millesime', 'ASC');
            }
            if($filtres['filtrageBottle']=='qte'){
                $query->orderBy('b.quantite', 'DESC');
            }
        }

        return $query->getQuery()->getResult();
    }
    
    
    function findAllIdentiques($typeDeVin,$typeDomaine,$typeAppellation,$typeCuvee,$typeRegion,$typePays,$millesime,$typeContenance){
        $query = $this->createQueryBuilder('b')
                ->where("1 = 1")
                ->andWhere("b.online = 1")
                ->andWhere("b.typeDeVin = :typeDeVin")
                ->andWhere("b.typeDomaine = :typeDomaine")
                ->andWhere("b.typeAppellation = :typeAppellation")
                ->andWhere("b.typeCuvee = :typeCuvee")
                ->andWhere("b.typeRegion = :typeRegion")
                ->andWhere("b.typePays = :typePays")
                ->andWhere("b.millesime = :millesime")
                ->andWhere("b.typeContenance = :typeContenance")
                ->setParameter('typeDeVin', $typeDeVin)
                ->setParameter('typeDomaine', $typeDomaine)
                ->setParameter('typeAppellation', $typeAppellation)
                ->setParameter('typeCuvee', $typeCuvee)
                ->setParameter('typeRegion', $typeRegion)
                ->setParameter('typePays', $typePays)
                ->setParameter('millesime', $millesime)
                ->setParameter('typeContenance', $typeContenance);
                
                
        return $query->getQuery()->getResult();
    }
    
    
    public function getTotalByMonthYear(){
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        
        $query = $this->createQueryBuilder('b')
                ->select("YEAR(b.createdAt) as year, MONTH(b.createdAt) as month, count(b.id) as total")
                ->where("1 = 1")
                ->andWhere("b.online = 1")
                ->groupBy("year")                
                ->groupBy("month");
        
        return $query->getQuery()->getResult();
    }
}
