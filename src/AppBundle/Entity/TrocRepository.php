<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TrocRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrocRepository extends EntityRepository
{
    
    function findByAllForUser($user, $archived){        
        $query = $this->createQueryBuilder('t')
                ->leftJoin('t.trocSections', 'ts')
                ->leftJoin('ts.contenu', 'tc')
                ->where('t.archived = :archived')
                ->setParameter('archived', $archived);
        
        $orQuery = $query->expr()->orx();
        $orQuery->add($query->expr()->eq("t.memberA", ":member"));
        $orQuery->add($query->expr()->eq("t.memberB", ":member"));
        
        $query->andWhere($orQuery)
            ->setParameter('member', $user);
        
        $query->orderBy('t.createdAt', 'DESC');

        return $query->getQuery()->getResult();
    }
    
    function findTrocLiesToBottle($bouteille, $id){
        $query = $this->createQueryBuilder('t')
                ->leftJoin('t.trocSections', 'ts')
                ->leftJoin('ts.contenu', 'tc')
                ->leftJoin('tc.trocABouteilles', 'tba')
                ->leftJoin('tc.trocBBouteilles', 'tbb')
                ->where('t.archived = 0')
                ->andWhere('t.id <> :troc')
                ->setParameter('troc', $id);
        
        $orQuery = $query->expr()->orx();
        $orQuery->add($query->expr()->eq("tba.bouteille", ":bouteille"));
        $orQuery->add($query->expr()->eq("tbb.bouteille", ":bouteille"));
        
        $query->andWhere($orQuery)
            ->setParameter('bouteille', $bouteille);
        
        return $query->getQuery()->getResult();
    }
    
    function findAllStillLive(){
        $query = $this->createQueryBuilder('t')
                ->where('t.archived = 0');
        return $query->getQuery()->getResult();
    }
    
    function findAllEnded(){
        $query = $this->createQueryBuilder('t')
                ->where('t.archived = 1');
        return $query->getQuery()->getResult();
    }
    
    
    public function countAll(){
        $query = $this->createQueryBuilder('b')
                ->select("count(b.id)");
        
        return $query->getQuery()->getSingleScalarResult();
    }
    
    public function getTotalByMonthYear(){
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        
        $query = $this->createQueryBuilder('b')
                ->select("YEAR(b.createdAt) as year, MONTH(b.createdAt) as month, count(b.id) as total")
                ->where("1 = 1")
                ->groupBy("year")                
                ->groupBy("month");
        
        return $query->getQuery()->getResult();
    }
    
}
